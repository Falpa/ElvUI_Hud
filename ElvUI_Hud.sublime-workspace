{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"growth",
				"growthValues"
			],
			[
				"Ge",
				"GenerateValidAnchors"
			],
			[
				"St",
				"StaticPopup_Show"
			],
			[
				"debu",
				"debuffOptions"
			],
			[
				"UpdateClass",
				"UpdateClassBarAnchors"
			],
			[
				"Sh",
				"ShadowOrbsBar"
			],
			[
				"W",
				"WarlockSpecBars"
			],
			[
				"spa",
				"spacesettings"
			],
			[
				"GetFr",
				"GetFrameLevel"
			],
			[
				"SetFr",
				"SetFrameLevel"
			],
			[
				"SetFrame",
				"SetFrameStrata"
			],
			[
				"Gene",
				"GenerateElementOptionTable"
			],
			[
				"name",
				"nameMap"
			],
			[
				"heal",
				"healcommOptions"
			],
			[
				"pvp",
				"pvpOptions"
			],
			[
				"comb",
				"combatOptions"
			],
			[
				"res",
				"restingOptions"
			],
			[
				"re",
				"resting"
			],
			[
				"raid",
				"raidIconOptions"
			],
			[
				"aura",
				"aurabarOptions"
			],
			[
				"aurab",
				"aurabars"
			],
			[
				"cp",
				"cpointOptions"
			],
			[
				"clas",
				"classbarOptions"
			],
			[
				"castb",
				"castbarOptions"
			],
			[
				"power",
				"powerOptions"
			],
			[
				"horiz",
				"horizCastbar"
			],
			[
				"GetFra",
				"GetFrameStrata"
			],
			[
				"SetFra",
				"SetFrameStrata"
			],
			[
				"UN",
				"UNIT_SPELLCAST_CHANNEL_STOP"
			],
			[
				"SetStat",
				"SetStatusBarColor"
			]
		]
	},
	"buffers":
	[
		{
			"file": "modules/hud/hud.lua",
			"settings":
			{
				"buffer_size": 12215,
				"line_ending": "Unix"
			}
		},
		{
			"file": "modules/hud/units/load_units.xml",
			"settings":
			{
				"buffer_size": 216,
				"line_ending": "Unix"
			}
		},
		{
			"file": "modules/hud/units/target.lua",
			"settings":
			{
				"buffer_size": 1012,
				"line_ending": "Unix"
			}
		},
		{
			"file": "libs/load_libs.xml",
			"settings":
			{
				"buffer_size": 321,
				"line_ending": "Unix"
			}
		},
		{
			"file": "core/core.lua",
			"settings":
			{
				"buffer_size": 7214,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 46 files for \"SetAlpha\" (case sensitive)\n\n/Users/mtindal/Projects/ElvUI_Hud/ElvUI_Hud.sublime-workspace:\n  457  			\"Flash\",\n  458  			\"Alpha\",\n  459: 			\"SetAlpha\",\n  460  			\"self:ConstructCombatFade(frame)\",\n  461  			\"self:ConstructCombatFrame(frame)\",\n  462  			\"hideOOC\",\n  463: 			\"SetAlpha\",\n  464  			\"hideOOC\",\n  465  			\"Strata\",\n\n/Users/mtindal/Projects/ElvUI_Hud/core/core.lua:\n   68  	elseif (event == \"PLAYER_ENTERING_WORLD\") then\n   69  			if (not c) then\n   70: 				frame:SetAlpha(oocalpha)\n   71  			end\n   72  	end\n   ..\n   86          for _,f in pairs(frames) do\n   87              self:DisableHide(f)\n   88:             f:SetAlpha(self.db['alpha'])\n   89          end\n   90      else\n   ..\n   92              self:EnableHide(f)\n   93              local alpha = self.db[InCombatLockdown() and 'alpha' or 'alphaOOC']\n   94:             f:SetAlpha(alpha)\n   95          end\n   96      end\n   ..\n  100      f:Hide()\n  101      f:EnableMouse(false)\n  102:     f:SetAlpha(0)\n  103  end\n  104  \n  ...\n  108      f:Show()\n  109      f:EnableMouse(m)\n  110:     f:SetAlpha(a)\n  111  end\n  112  \n  ...\n  130  function OnEnter(self) \n  131      if E.db.hud.hideOOC and not InCombatLockdown() then \n  132:         self:SetAlpha(E.db.hud.alpha) \n  133      end \n  134  end\n  ...\n  136  function OnLeave(self) \n  137      if E.db.hud.hideOOC and not InCombatLockdown() then \n  138:         self:SetAlpha(E.db.hud.alphaOOC) \n  139      end \n  140  end\n  141  \n  142: function SetAlpha(frame,alpha)\n  143      if not frame.hidden then\n  144:         frame:SetAlpha_(alpha)\n  145      else\n  146:         frame:SetAlpha_(0)\n  147      end\n  148  end\n  ...\n  158      hider:RegisterEvent(\"PLAYER_ENTERING_WORLD\")\n  159      hider:SetScript(\"OnEvent\", function(self,event) H:Hide(frame,event) end)\n  160:     if not frame.SetAlpha_ then\n  161:         frame.SetAlpha_ = frame.SetAlpha\n  162:         frame.SetAlpha = SetAlpha\n  163      end\n  164:     frame.Hide = function(self) frame.hidden = true; self:SetAlpha(0) end\n  165:     frame.Show = function(self) frame.hidden = false; self:SetAlpha(1) end\n  166      frame:HookScript(\"OnEnter\",OnEnter)\n  167      frame:HookScript(\"OnLeave\",OnLeave)\n\n/Users/mtindal/Projects/ElvUI_Hud/libs/oUF_ShadowOrbsBar/oUF_ShadowOrbsBar.lua:\n   25  	for i = 1, PRIEST_BAR_NUM_ORBS do\n   26  		if i <= numOrbs then\n   27: 			pb[i]:SetAlpha(1)\n   28  		else\n   29: 			pb[i]:SetAlpha(.2)\n   30  		end\n   31  	end\n\n/Users/mtindal/Projects/ElvUI_Hud/libs/oUF_WarlockSpecBars/oUF_WarlockSpecBars.lua:\n   46  			for i = 1, maxShards do\n   47  				if i <= numShards then\n   48: 					wsb[i]:SetAlpha(1)\n   49  				else\n   50: 					wsb[i]:SetAlpha(.2)\n   51  				end\n   52  			end\n   ..\n   87  				end\n   88  				wsb[i]:Show()\n   89: 				if wsb[i].bg then wsb[i].bg:SetAlpha(0.15) end\n   90  			end	\n   91  		end\n   ..\n  107  				end\n  108  				wsb[i]:SetStatusBarColor(unpack(Colors[SPEC_WARLOCK_DESTRUCTION]))\n  109: 				if wsb[i].bg then wsb[i].bg:SetAlpha(0.15) wsb[i].bg:SetTexture(unpack(Colors[SPEC_WARLOCK_DESTRUCTION])) end\n  110  			end\n  111  			\n  ...\n  127  				end\n  128  				wsb[i]:SetStatusBarColor(unpack(Colors[SPEC_WARLOCK_AFFLICTION]))\n  129: 				if wsb[i].bg then wsb[i].bg:SetAlpha(0) end\n  130  			end\n  131  			\n  ...\n  138  			wsb[1]:SetStatusBarColor(unpack(Colors[SPEC_WARLOCK_DEMONOLOGY]))\n  139  			if wsb.value then wsb.value:Show() end\n  140: 			if wsb[1].bg then wsb[1].bg:SetAlpha(0.15) wsb[1].bg:SetTexture(unpack(Colors[SPEC_WARLOCK_DEMONOLOGY])) end\n  141  		end\n  142  		\n\n/Users/mtindal/Projects/ElvUI_Hud/libs/oUF_WildMushroom/oUF_WildMushroom.lua:\n   96  			\n   97  			if Point.bg then\n   98: 				Point.bg:SetAlpha(0.15)\n   99  				Point.bg:SetAllPoints()\n  100  				Point.bg:SetTexture(unpack(Colors))\n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/construct_elements.lua:\n  420          maxOverflow = 1,\n  421          PostUpdate = function(self)\n  422:             if self.myBar:GetValue() == 0 then self.myBar:SetAlpha(0) else self.myBar:SetAlpha(1) end\n  423:             if self.otherBar:GetValue() == 0 then self.otherBar:SetAlpha(0) else self.otherBar:SetAlpha(1) end\n  424          end\n  425      }\n  ...\n  430      local GCD = self:ConfigureStatusBar(frame,'gcd')\n  431      GCD:SetStatusBarColor(.8,.8,.8,0)\n  432:     GCD:SetAlpha(1)\n  433      GCD:SetOrientation('VERTICAL')\n  434      GCD:SetFrameStrata(frame.Power:GetFrameStrata())\n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/hud.lua:\n  212  			if E.db.hud.enabled and E.db.hud.hideOOC and not InCombatLockdown() then\n  213  				self:Show()\n  214: 				self:SetAlpha(0)\n  215  			end\n  216  		end)\n  217: 		frame:HookScript(\"OnEnter\",function(self) if E.db.hud.hideOOC and not InCombatLockdown() and UnitExists(self.unit) then frame:SetAlpha(E.db.hud.alpha) end end)\n  218: 	    frame:HookScript(\"OnLeave\",function(self) if E.db.hud.hideOOC and not InCombatLockdown() and UnitExists(self.unit) then frame:SetAlpha(E.db.hud.alphaOOC) end end)\n  219: 	    frame:HookScript(\"OnShow\",function(self) if E.db.hud.hideOOC and not InCombatLockdown() then frame:SetAlpha(E.db.hud.alphaOOC) end end)\n  220  	end\n  221  	frame.menu = UF.SpawnMenu\n  ...\n  241  		frame:Enable()\n  242  		frame:EnableMouse(self.db.hideElv or self.db.enableMouse)\n  243: 		frame:SetAlpha(self.db.alpha)\n  244  		local event\n  245  		if InCombatLockdown() then\n  ...\n  330      bg:SetTexture(E['media'].blankTex)\n  331      bg:SetTexture(.1, .1, .1)\n  332:     bg:SetAlpha(.2)\n  333      bg.multiplier = 0.3 \n  334      sb.bg = bg\n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/update_elements.lua:\n   23  		end\n   24  		if spaced then\n   25: 			frame.WildMushroom:SetAlpha(0)\n   26  		else\n   27: 			frame.WildMushroom:SetAlpha(1)\n   28  		end\n   29  	end\n   ..\n   36  		end\n   37  		if spaced then\n   38: 			frame.CPoints:SetAlpha(0)\n   39  		else\n   40: 			frame.CPoints:SetAlpha(1)\n   41  		end\n   42  	end\n   ..\n  125  		if not frame[e] then return end\n  126  		if spaced then\n  127: 			frame[e]:SetAlpha(0)\n  128  		else\n  129: 			frame[e]:SetAlpha(1)\n  130  		end\n  131  		for i = 1, maxPoints do\n  132  			frame[e][i]:Size(size.width,(size.height - (spaced and totalspacing or 2)) / numPoints)\n  133: 			if not frame[e][i].SetAlpha_ then frame[e][i].SetAlpha_ = frame[e][i].SetAlpha; frame[e][i].SetAlpha = function(self,alpha) self:SetAlpha_(self.enabled and alpha or self.alpha) end end\n  134  			if config['enabled'] and i <= numPoints then\n  135  				frame[e][i].enabled = true\n  136  				frame[e][i].alpha = 1\n  137: 				frame[e][i]:SetAlpha(i <= curPoints and 1 or .2)\n  138  				if spaced then\n  139  					frame[e][i].backdrop:Show()\n  ...\n  145  				frame[e][i].backdrop:Hide()\n  146  				frame[e][i].alpha = 0\n  147: 				frame[e][i]:SetAlpha(0)\n  148  			end\n  149  		end\n  ...\n  476  	if enabled then\n  477  		frame:EnableElement(e)\n  478: 		frame[e]:SetAlpha(1)\n  479  		if config['value'] and frame[e].value then\n  480  			if config['value']['enabled'] then\n  ...\n  488  	else\n  489  		frame:DisableElement(e)\n  490: 		frame[e]:SetAlpha(0)\n  491  		if element == 'gcd' then\n  492  			frame.GCD:Hide()\n  ...\n  630  	for i=1, MAX_COMBO_POINTS do\n  631  		if(i <= cp) then\n  632: 			cpoints[i]:SetAlpha(1)\n  633  		else\n  634: 			cpoints[i]:SetAlpha(0.15)\n  635  		end\n  636  	end\n  ...\n  766  	for i = 1, 5 do\n  767  		if(i <= num) then\n  768: 			self.HolyPower[i]:SetAlpha(1)\n  769  		else\n  770: 			self.HolyPower[i]:SetAlpha(.2)\n  771  		end\n  772  	end\n  ...\n  778  	for i = 1, SHARD_BAR_NUM_SHARDS do\n  779  		if(i <= num) then\n  780: 			self.SoulShards[i]:SetAlpha(1)\n  781  		else\n  782: 			self.SoulShards[i]:SetAlpha(.2)\n  783  		end\n  784  	end\n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/units/pet.lua:\n   14      frame.RaidIcon = self:ConstructRaidIcon(frame)\n   15  \n   16:     frame:SetAlpha(self.db.alpha)\n   17      H:HideOOC(frame)\n   18      frame:Point(\"BOTTOMRIGHT\", ElvUF_PlayerHud, \"BOTTOMLEFT\", -110, 0)\n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/units/pettarget.lua:\n   11  	frame.RaidIcon = self:ConstructRaidIcon(frame)\n   12      \n   13:     frame:SetAlpha(self.db.alpha)\n   14      H:HideOOC(frame)\n   15      frame:Point(\"BOTTOMRIGHT\", ElvUF_PetHud, \"BOTTOMLEFT\", -110, 0)\n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/units/player.lua:\n   61  	frame.HealPrediction = self:ConstructHealComm(frame)\n   62  	frame.GCD = self:ConstructGCD(frame)\n   63: 	frame:SetAlpha(self.db.alpha)\n   64  \n   65      H:HideOOC(frame)\n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/units/target.lua:\n   23      frame.RaidIcon = self:ConstructRaidIcon(frame)\n   24      \n   25:     frame:SetAlpha(self.db.alpha)\n   26      H:HideOOC(frame)\n   27      frame:Point(\"RIGHT\", E.UIParent, \"CENTER\", 275, 0) --Set to default position \n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/units/targettarget.lua:\n   11      frame.RaidIcon = self:ConstructRaidIcon(frame)\n   12      \n   13:     frame:SetAlpha(self.db.alpha)\n   14      H:HideOOC(frame)\n   15      frame:Point(\"BOTTOMLEFT\", ElvUF_TargetHud, \"BOTTOMRIGHT\", 110, 0)\n\n65 matches across 13 files\n\n\nSearching 46 files for \"SetAlpha\" (case sensitive)\n\n/Users/mtindal/Projects/ElvUI_Hud/ElvUI_Hud.sublime-workspace:\n  457  			\"Flash\",\n  458  			\"Alpha\",\n  459: 			\"SetAlpha\",\n  460  			\"self:ConstructCombatFade(frame)\",\n  461  			\"self:ConstructCombatFrame(frame)\",\n  462  			\"hideOOC\",\n  463: 			\"SetAlpha\",\n  464  			\"hideOOC\",\n  465  			\"Strata\",\n\n/Users/mtindal/Projects/ElvUI_Hud/core/core.lua:\n   68  	elseif (event == \"PLAYER_ENTERING_WORLD\") then\n   69  			if (not c) then\n   70: 				frame:SetAlpha(oocalpha)\n   71  			end\n   72  	end\n   ..\n   86          for _,f in pairs(frames) do\n   87              self:DisableHide(f)\n   88:             f:SetAlpha(self.db['alpha'])\n   89          end\n   90      else\n   ..\n   92              self:EnableHide(f)\n   93              local alpha = self.db[InCombatLockdown() and 'alpha' or 'alphaOOC']\n   94:             f:SetAlpha(alpha)\n   95          end\n   96      end\n   ..\n  100      f:Hide()\n  101      f:EnableMouse(false)\n  102:     f:SetAlpha(0)\n  103  end\n  104  \n  ...\n  108      f:Show()\n  109      f:EnableMouse(m)\n  110:     f:SetAlpha(a)\n  111  end\n  112  \n  ...\n  130  function OnEnter(self) \n  131      if E.db.hud.hideOOC and not InCombatLockdown() then \n  132:         self:SetAlpha(E.db.hud.alpha) \n  133      end \n  134  end\n  ...\n  136  function OnLeave(self) \n  137      if E.db.hud.hideOOC and not InCombatLockdown() then \n  138:         self:SetAlpha(E.db.hud.alphaOOC) \n  139      end \n  140  end\n  141  \n  142: function SetAlpha(frame,alpha)\n  143      if not frame.hidden then\n  144:         frame:SetAlpha_(alpha)\n  145      else\n  146:         frame:SetAlpha_(0)\n  147      end\n  148  end\n  ...\n  158      hider:RegisterEvent(\"PLAYER_ENTERING_WORLD\")\n  159      hider:SetScript(\"OnEvent\", function(self,event) H:Hide(frame,event) end)\n  160:     if not frame.SetAlpha_ then\n  161:         frame.SetAlpha_ = frame.SetAlpha\n  162:         frame.SetAlpha = SetAlpha\n  163      end\n  164:     frame.Hide = function(self) frame.hidden = true; self:SetAlpha(0) end\n  165:     frame.Show = function(self) frame.hidden = false; self:SetAlpha(1) end\n  166      frame:HookScript(\"OnEnter\",OnEnter)\n  167      frame:HookScript(\"OnLeave\",OnLeave)\n\n/Users/mtindal/Projects/ElvUI_Hud/libs/oUF_ShadowOrbsBar/oUF_ShadowOrbsBar.lua:\n   25  	for i = 1, PRIEST_BAR_NUM_ORBS do\n   26  		if i <= numOrbs then\n   27: 			pb[i]:SetAlpha(1)\n   28  		else\n   29: 			pb[i]:SetAlpha(.2)\n   30  		end\n   31  	end\n\n/Users/mtindal/Projects/ElvUI_Hud/libs/oUF_WarlockSpecBars/oUF_WarlockSpecBars.lua:\n   46  			for i = 1, maxShards do\n   47  				if i <= numShards then\n   48: 					wsb[i]:SetAlpha(1)\n   49  				else\n   50: 					wsb[i]:SetAlpha(.2)\n   51  				end\n   52  			end\n   ..\n   87  				end\n   88  				wsb[i]:Show()\n   89: 				if wsb[i].bg then wsb[i].bg:SetAlpha(0.15) end\n   90  			end	\n   91  		end\n   ..\n  107  				end\n  108  				wsb[i]:SetStatusBarColor(unpack(Colors[SPEC_WARLOCK_DESTRUCTION]))\n  109: 				if wsb[i].bg then wsb[i].bg:SetAlpha(0.15) wsb[i].bg:SetTexture(unpack(Colors[SPEC_WARLOCK_DESTRUCTION])) end\n  110  			end\n  111  			\n  ...\n  127  				end\n  128  				wsb[i]:SetStatusBarColor(unpack(Colors[SPEC_WARLOCK_AFFLICTION]))\n  129: 				if wsb[i].bg then wsb[i].bg:SetAlpha(0) end\n  130  			end\n  131  			\n  ...\n  138  			wsb[1]:SetStatusBarColor(unpack(Colors[SPEC_WARLOCK_DEMONOLOGY]))\n  139  			if wsb.value then wsb.value:Show() end\n  140: 			if wsb[1].bg then wsb[1].bg:SetAlpha(0.15) wsb[1].bg:SetTexture(unpack(Colors[SPEC_WARLOCK_DEMONOLOGY])) end\n  141  		end\n  142  		\n\n/Users/mtindal/Projects/ElvUI_Hud/libs/oUF_WildMushroom/oUF_WildMushroom.lua:\n   96  			\n   97  			if Point.bg then\n   98: 				Point.bg:SetAlpha(0.15)\n   99  				Point.bg:SetAllPoints()\n  100  				Point.bg:SetTexture(unpack(Colors))\n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/construct_elements.lua:\n  420          maxOverflow = 1,\n  421          PostUpdate = function(self)\n  422:             if self.myBar:GetValue() == 0 then self.myBar:SetAlpha(0) else self.myBar:SetAlpha(1) end\n  423:             if self.otherBar:GetValue() == 0 then self.otherBar:SetAlpha(0) else self.otherBar:SetAlpha(1) end\n  424          end\n  425      }\n  ...\n  430      local GCD = self:ConfigureStatusBar(frame,'gcd')\n  431      GCD:SetStatusBarColor(.8,.8,.8,0)\n  432:     GCD:SetAlpha(1)\n  433      GCD:SetOrientation('VERTICAL')\n  434      GCD:SetFrameStrata(frame.Power:GetFrameStrata())\n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/hud.lua:\n  212  			if E.db.hud.enabled and E.db.hud.hideOOC and not InCombatLockdown() then\n  213  				self:Show()\n  214: 				self:SetAlpha(0)\n  215  			end\n  216  		end)\n  217: 		frame:HookScript(\"OnEnter\",function(self) if E.db.hud.hideOOC and not InCombatLockdown() and UnitExists(self.unit) then frame:SetAlpha(E.db.hud.alpha) end end)\n  218: 	    frame:HookScript(\"OnLeave\",function(self) if E.db.hud.hideOOC and not InCombatLockdown() and UnitExists(self.unit) then frame:SetAlpha(E.db.hud.alphaOOC) end end)\n  219: 	    frame:HookScript(\"OnShow\",function(self) if E.db.hud.hideOOC and not InCombatLockdown() then frame:SetAlpha(E.db.hud.alphaOOC) end end)\n  220  	end\n  221  	frame.menu = UF.SpawnMenu\n  ...\n  241  		frame:Enable()\n  242  		frame:EnableMouse(self.db.hideElv or self.db.enableMouse)\n  243: 		frame:SetAlpha(self.db.alpha)\n  244  		local event\n  245  		if InCombatLockdown() then\n  ...\n  330      bg:SetTexture(E['media'].blankTex)\n  331      bg:SetTexture(.1, .1, .1)\n  332:     bg:SetAlpha(.2)\n  333      bg.multiplier = 0.3 \n  334      sb.bg = bg\n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/update_elements.lua:\n   23  		end\n   24  		if spaced then\n   25: 			frame.WildMushroom:SetAlpha(0)\n   26  		else\n   27: 			frame.WildMushroom:SetAlpha(1)\n   28  		end\n   29  	end\n   ..\n   36  		end\n   37  		if spaced then\n   38: 			frame.CPoints:SetAlpha(0)\n   39  		else\n   40: 			frame.CPoints:SetAlpha(1)\n   41  		end\n   42  	end\n   ..\n  125  		if not frame[e] then return end\n  126  		if spaced then\n  127: 			frame[e]:SetAlpha(0)\n  128  		else\n  129: 			frame[e]:SetAlpha(1)\n  130  		end\n  131  		for i = 1, maxPoints do\n  132  			frame[e][i]:Size(size.width,(size.height - (spaced and totalspacing or 2)) / numPoints)\n  133: 			if not frame[e][i].SetAlpha_ then frame[e][i].SetAlpha_ = frame[e][i].SetAlpha; frame[e][i].SetAlpha = function(self,alpha) self:SetAlpha_(self.enabled and alpha or self.alpha) end end\n  134  			if config['enabled'] and i <= numPoints then\n  135  				frame[e][i].enabled = true\n  136  				frame[e][i].alpha = 1\n  137: 				frame[e][i]:SetAlpha(i <= curPoints and 1 or .2)\n  138  				if spaced then\n  139  					frame[e][i].backdrop:Show()\n  ...\n  145  				frame[e][i].backdrop:Hide()\n  146  				frame[e][i].alpha = 0\n  147: 				frame[e][i]:SetAlpha(0)\n  148  			end\n  149  		end\n  ...\n  476  	if enabled then\n  477  		frame:EnableElement(e)\n  478: 		frame[e]:SetAlpha(1)\n  479  		if config['value'] and frame[e].value then\n  480  			if config['value']['enabled'] then\n  ...\n  488  	else\n  489  		frame:DisableElement(e)\n  490: 		frame[e]:SetAlpha(0)\n  491  		if element == 'gcd' then\n  492  			frame.GCD:Hide()\n  ...\n  630  	for i=1, MAX_COMBO_POINTS do\n  631  		if(i <= cp) then\n  632: 			cpoints[i]:SetAlpha(1)\n  633  		else\n  634: 			cpoints[i]:SetAlpha(0.15)\n  635  		end\n  636  	end\n  ...\n  766  	for i = 1, 5 do\n  767  		if(i <= num) then\n  768: 			self.HolyPower[i]:SetAlpha(1)\n  769  		else\n  770: 			self.HolyPower[i]:SetAlpha(.2)\n  771  		end\n  772  	end\n  ...\n  778  	for i = 1, SHARD_BAR_NUM_SHARDS do\n  779  		if(i <= num) then\n  780: 			self.SoulShards[i]:SetAlpha(1)\n  781  		else\n  782: 			self.SoulShards[i]:SetAlpha(.2)\n  783  		end\n  784  	end\n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/units/pet.lua:\n   14      frame.RaidIcon = self:ConstructRaidIcon(frame)\n   15  \n   16:     frame:SetAlpha(self.db.alpha)\n   17      H:HideOOC(frame)\n   18      frame:Point(\"BOTTOMRIGHT\", ElvUF_PlayerHud, \"BOTTOMLEFT\", -110, 0)\n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/units/pettarget.lua:\n   11  	frame.RaidIcon = self:ConstructRaidIcon(frame)\n   12      \n   13:     frame:SetAlpha(self.db.alpha)\n   14      H:HideOOC(frame)\n   15      frame:Point(\"BOTTOMRIGHT\", ElvUF_PetHud, \"BOTTOMLEFT\", -110, 0)\n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/units/player.lua:\n   61  	frame.HealPrediction = self:ConstructHealComm(frame)\n   62  	frame.GCD = self:ConstructGCD(frame)\n   63: 	frame:SetAlpha(self.db.alpha)\n   64  \n   65      H:HideOOC(frame)\n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/units/target.lua:\n   23      frame.RaidIcon = self:ConstructRaidIcon(frame)\n   24      \n   25:     frame:SetAlpha(self.db.alpha)\n   26      H:HideOOC(frame)\n   27      frame:Point(\"RIGHT\", E.UIParent, \"CENTER\", 275, 0) --Set to default position \n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/units/targettarget.lua:\n   11      frame.RaidIcon = self:ConstructRaidIcon(frame)\n   12      \n   13:     frame:SetAlpha(self.db.alpha)\n   14      H:HideOOC(frame)\n   15      frame:Point(\"BOTTOMLEFT\", ElvUF_TargetHud, \"BOTTOMRIGHT\", 110, 0)\n\n65 matches across 13 files\n\n\nSearching 46 files for \"Eclipse\" (case sensitive)\n\n/Users/mtindal/Projects/ElvUI_Hud/locales/china.lua:\n   33  L[\"Pet Target Hud\"] = true\n   34  L['What to attach this element to.'] = true\n   35: L[\"Eclipse\"] = true\n   36  L[\"Override\"] = true\n   37  L[\"Override the texture for this element\"] = true\n\n/Users/mtindal/Projects/ElvUI_Hud/locales/english.lua:\n   34  L[\"Pet Target Hud\"] = true\n   35  L['What to attach this element to.'] = true\n   36: L[\"Eclipse\"] = true\n   37  L[\"Override\"] = true\n   38  L[\"Override the texture for this element\"] = true\n\n/Users/mtindal/Projects/ElvUI_Hud/locales/french.lua:\n   33  L[\"Pet Target Hud\"] = \"Hud de la cible du familier\"\n   34  L['What to attach this element to.'] = \"Quelles éléments à attacher\"\n   35: L[\"Eclipse\"] = \"Eclipse\"\n   36  L[\"Override\"] = \"Substituer\"\n   37  L[\"Override the texture for this element\"] = \"Substituer la texture de cette élément\"\n\n/Users/mtindal/Projects/ElvUI_Hud/locales/german.lua:\n   34  L[\"Pet Target Hud\"] = \"Ziel von Begleiter Hud\"\n   35  L['What to attach this element to.'] = \"Was zu diesem Element anheften\"\n   36: L[\"Eclipse\"] = \"Eclipse\"\n   37  L[\"Override\"] = \"Aufheben\"\n   38  L[\"Override the texture for this element\"] = \"Aufheben der Textur für dieses Element\"\n\n/Users/mtindal/Projects/ElvUI_Hud/locales/italian.lua:\n   33  L[\"Pet Target Hud\"] = true\n   34  L['What to attach this element to.'] = true\n   35: L[\"Eclipse\"] = true\n   36  L[\"Override\"] = true\n   37  L[\"Override the texture for this element\"] = true\n\n/Users/mtindal/Projects/ElvUI_Hud/locales/korean.lua:\n   35  L[\"Pet Target Hud\"] = \"소환수의 대상 Hud\";\n   36  L['What to attach this element to.'] = \"이 요소를 첨부 무엇입니까\";\n   37: L[\"Eclipse\"] = true\n   38  L[\"Override\"] = \"대체\";\n   39  L[\"Override the texture for this element\"] = \"이 항목에 대한 기본 텍스처를 교체\";\n\n/Users/mtindal/Projects/ElvUI_Hud/locales/portuguese.lua:\n   33  L[\"Pet Target Hud\"] = true\n   34  L['What to attach this element to.'] = true\n   35: L[\"Eclipse\"] = true\n   36  L[\"Override\"] = true\n   37  L[\"Override the texture for this element\"] = true\n\n/Users/mtindal/Projects/ElvUI_Hud/locales/russian.lua:\n   33  L[\"Pet Target Hud\"] = \"Цель питомца\"\n   34  L['What to attach this element to.'] = \"К чему прикреплять этот элемент\"\n   35: L[\"Eclipse\"] = \"Затмение\"\n   36  L[\"Override\"] = \"Заменить\"\n   37  L[\"Override the texture for this element\"] = \"Заменить стандартную текстуру для этого элемента\"\n\n/Users/mtindal/Projects/ElvUI_Hud/locales/spanish.lua:\n   33  L[\"Pet Target Hud\"] = \"Hud de Objetivo de Mascota\"\n   34  L['What to attach this element to.'] = \"A qué fijar este elemento\"\n   35: L[\"Eclipse\"] = true\n   36  L[\"Override\"] = \"Sobrescribir\"\n   37  L[\"Override the texture for this element\"] = \"Sobrescribir la textura para este elemento\"\n\n/Users/mtindal/Projects/ElvUI_Hud/locales/taiwan.lua:\n   34  L[\"Pet Target Hud\"] = true\n   35  L['What to attach this element to.'] = true\n   36: L[\"Eclipse\"] = true\n   37  L[\"Override\"] = true\n   38  L[\"Override the texture for this element\"] = true\n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/construct_elements.lua:\n  163  end\n  164  \n  165: -- Eclipse Bar for druids\n  166: function H:ConstructEclipseBar(frame)\n  167      self:AddElement(frame,'classbars')\n  168  \n  ...\n  189      eclipseBarText:SetPoint(\"LEFT\", eclipseBar, \"RIGHT\", E:Scale(10), 0)\n  190      \n  191:     eclipseBar.PostUpdatePower = H.EclipseDirection\n  192      eclipseBar.Text = eclipseBarText\n  193  \n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/hud.lua:\n   58  function H:GetClassBarName()\n   59  	if E.myclass == \"DRUID\" then\n   60: 		return 'EclipseBar'\n   61  	end\n   62  \n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/options.lua:\n  133                          order = 2,\n  134                          type = \"group\",\n  135:                         name = L[\"Eclipse\"],\n  136                          guiInline = true,\n  137                          get = function(info) return E.db.hud.units[unit][element].anchor.eclipse[ info[#info] ] end,\n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/update_elements.lua:\n   47  		local curPoints\n   48  		if E.myclass == \"DRUID\" then\n   49: 			frame.EclipseBar.LunarBar:Size(frame.EclipseBar:GetSize())\n   50: 			frame.EclipseBar.SolarBar:Size(frame.EclipseBar:GetSize())\n   51: 			frame.EclipseBar:ForceUpdate()\n   52  			return\n   53  		end\n   ..\n  182  	if element == 'classbars' then\n  183  		if E.myclass == \"DRUID\" then\n  184: 			frame.EclipseBar.LunarBar:SetPoint('LEFT', frame.EclipseBar, 'LEFT', 0, 0)\n  185: 			frame.EclipseBar.SolarBar:SetPoint('LEFT', frame.EclipseBar, 'LEFT', 0, 0)\n  186  		end\n  187  \n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/units/player.lua:\n   17  \n   18  	if E.myclass == \"DRUID\" then\n   19: 		frame.EclipseBar = self:ConstructEclipseBar(frame)\n   20  		frame.WildMushroom = self:ConstructWildMushroomBar(frame)\n   21  	end\n\n28 matches across 15 files\n\n\nSearching 46 files for \"LunarBar\" (case sensitive)\n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/construct_elements.lua:\n  178      lunarBar:SetStatusBarColor(.30, .52, .90)\n  179      lunarBar:SetOrientation('VERTICAL')\n  180:     eclipseBar.LunarBar = lunarBar\n  181  \n  182      local solarBar = self:ConfigureStatusBar(frame,'classbars',eclipseBar,'solarbar',true)\n\n/Users/mtindal/Projects/ElvUI_Hud/modules/hud/update_elements.lua:\n   47  		local curPoints\n   48  		if E.myclass == \"DRUID\" then\n   49: 			frame.EclipseBar.LunarBar:SetMinMaxValues(0, 0)\n   50  			frame.EclipseBar.SolarBar:SetMinMaxValues(0, 0)\n   51: 			frame.EclipseBar.LunarBar:SetStatusBarColor(unpack(ElvUF.colors.eclipseBar[1]))\n   52  			frame.EclipseBar.SolarBar:SetStatusBarColor(unpack(ElvUF.colors.eclipseBar[2]))\n   53: 			frame.EclipseBar.LunarBar:Size(frame.EclipseBar:GetSize())\n   54  			frame.EclipseBar.SolarBar:Size(frame.EclipseBar:GetSize())\n   55  			frame.EclipseBar:ForceUpdate()\n\n4 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 24077,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "core/options.lua",
			"settings":
			{
				"buffer_size": 7956,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "local E, L, V, P, G = unpack(ElvUI); --Inport: Engine, Locales, ProfileDB, GlobalDB\nlocal H = E:GetModule('HUD');\nlocal UF = E:GetModule('UnitFrames');\nlocal LSM = LibStub(\"LibSharedMedia-3.0\");\n\n-- Health for all units\nfunction H:ConstructHealth(frame)\n    self:AddElement(frame,'health')\n\n	-- Health Bar\n    local health = self:ConfigureStatusBar(frame,'health')\n    health:SetOrientation(\"VERTICAL\")\n    health:SetFrameLevel(frame:GetFrameLevel() + 5)\n    health:Point(\"LEFT\",frame,\"LEFT\")\n	health.value = self:ConfigureFontString(frame,'health',health)		\n	health.PostUpdate = H.PostUpdateHealth\n    health.frequentUpdates = true\n\n    health.colorSmooth = false\n    --health.colorDisconnected = false\n    --health.colorTapping = true	\n\n    return health\nend\n\n-- Power for units it is enabled on\nfunction H:ConstructPower(frame)\n    self:AddElement(frame,'power')\n    \n    local power = self:ConfigureStatusBar(frame,'power')\n    power:SetOrientation(\"VERTICAL\")\n    power:SetFrameLevel(frame:GetFrameLevel()+1)\n\n    power.value = self:ConfigureFontString(frame,'power',power)               \n    \n    power.PreUpdate = H.PreUpdatePowerHud\n    power.PostUpdate = H.PostUpdatePowerHud\n\n    -- Update the Power bar Frequently\n    power.frequentUpdates = true\n\n    power.colorTapping = true   \n    power.colorPower = true\n    power.colorReaction = true\n    power.colorDisconnected = true      \n\n    return power\nend \n\n-- Castbar for units it is enabled on\n-- For player/target castbar can be (and defaults) to horizontal mode.\n-- For pet/targettarget/pettarget castbar is always vertical overlaid on the power bar.\n-- Note in this version the castbar is no longer anchored to the power bar, so each\n-- element can be disabled independently\nfunction H:ConstructCastbar(frame)\n    self:AddElement(frame,'castbar')\n    local vertical_castbar = self:ConfigureStatusBar(frame,'vertical_castbar')\n    local horizontal_castbar = self:ConfigureStatusBar(frame,'horizontal_castbar')\n\n    do\n        local castbar = vertical_castbar\n        castbar.PostCastStart = H.PostCastStart\n        castbar.PostChannelStart = H.PostChannelStart\n        castbar.OnUpdate = H.CastbarUpdate\n        --castbar.PostCastInterruptible = H.PostCastInterruptible\n        --castbar.PostCastNotInterruptible = H.PostCastNotInterruptible\n        castbar:SetOrientation(\"VERTICAL\")\n        castbar:SetFrameStrata(frame.Power:GetFrameStrata())\n        castbar:SetFrameLevel(frame.Power:GetFrameLevel()+2)\n    \n        castbar.Time = self:ConfigureFontString(frame,'castbar',castbar,'time')\n        castbar.Time:Point(\"BOTTOM\", castbar, \"TOP\", 0, 4)\n        castbar.Time:SetTextColor(0.84, 0.75, 0.65)\n        castbar.Time:SetJustifyH(\"RIGHT\")\n        \n        castbar.Text = self:ConfigureFontString(frame,'castbar',castbar,'text')\n        castbar.Text:SetPoint(\"TOP\", castbar, \"BOTTOM\", 0, -4)\n        castbar.Text:SetTextColor(0.84, 0.75, 0.65)\n        \n        castbar.Spark = castbar:CreateTexture(nil, 'OVERLAY')\n        castbar.Spark:Height(12)\n        castbar.Spark:SetBlendMode('ADD')\n        castbar.Spark:SetVertexColor(1, 1, 1)\n\n        --Set to castbar.SafeZone\n        castbar.LatencyTexture = self:ConfigureTexture(frame,'castbar',castbar,'latency')\n        castbar.LatencyTexture:SetVertexColor(0.69, 0.31, 0.31, 0.75)   \n        castbar.SafeZone = castbar.LatencyTexture\n        \n        local button = CreateFrame(\"Frame\", nil, castbar)\n        button:SetTemplate(\"Default\")\n        \n        button:Point(\"BOTTOM\", castbar, \"BOTTOM\", 0, 0)\n        \n        local icon = button:CreateTexture(nil, \"ARTWORK\")\n        icon:Point(\"TOPLEFT\", button, 2, -2)\n        icon:Point(\"BOTTOMRIGHT\", button, -2, 2)\n        icon:SetTexCoord(0.08, 0.92, 0.08, .92)\n        icon.bg = button\n        \n        --Set to castbar.Icon\n        castbar.ButtonIcon = icon\n    else\n        castbar:SetFrameLevel(6)\n\n        castbar.CustomTimeText = H.CustomCastTimeText\n        castbar.CustomDelayText = H.CustomCastDelayText\n        if frame.unit ~= 'player' then\n            castbar.PostCastStart = H.CheckCast\n            castbar.PostChannelStart = H.CheckCast\n        else\n            castbar.PostCastStart = UF.PostCastStart\n            castbar.PostChannelStart = UF.PostCastStart\n            castbar.PostCastStop = UF.PostCastStop\n            castbar.PostChannelStop = UF.PostCastStop\n            castbar.PostChannelUpdate = UF.PostChannelUpdate\n            castbar.PostCastInterruptible = UF.PostCastInterruptible\n            castbar.PostCastNotInterruptible = UF.PostCastNotInterruptible\n        end\n\n        castbar.Time = self:ConfigureFontString(frame,'castbar',castbar,'time')\n        castbar.Time:SetPoint(\"RIGHT\", castbar, \"RIGHT\", -4, 0)\n        castbar.Time:SetTextColor(0.84, 0.75, 0.65)\n        castbar.Time:SetJustifyH(\"RIGHT\")\n        \n        castbar.button = CreateFrame(\"Frame\", nil, castbar)\n        castbar.button:Size(26)\n        castbar.button:SetTemplate(\"Default\")\n        castbar.button:CreateShadow(\"Default\")\n\n        castbar.Spark = castbar:CreateTexture(nil, 'OVERLAY')\n        castbar.Spark:SetBlendMode('ADD')\n        castbar.Spark:SetVertexColor(1, 1, 1)\n        castbar.Spark:Width(12)\n\n        castbar.Text = self:ConfigureFontString(frame,'castbar',castbar,'text')\n        castbar.Text:SetTextColor(0.84, 0.75, 0.65)\n        castbar.Text:SetPoint(\"LEFT\", castbar.button, \"RIGHT\", 4, 0)\n\n        castbar.Icon = castbar.button:CreateTexture(nil, \"ARTWORK\")\n        castbar.Icon:Point(\"TOPLEFT\", castbar.button, 2, -2)\n        castbar.Icon:Point(\"BOTTOMRIGHT\", castbar.button, -2, 2)\n        castbar.Icon:SetTexCoord(0.08, 0.92, 0.08, .92)\n    \n        castbar.button:SetPoint(\"LEFT\")\n    \n        --Set to castbar.SafeZone\n        castbar.LatencyTexture = self:ConfigureTexture(frame,'castbar',castbar,'latency')\n        castbar.LatencyTexture:SetVertexColor(0.69, 0.31, 0.31, 0.75)   \n        castbar.SafeZone = castbar.LatencyTexture\n    end\n\n    if frame.unit ~= 'target' then\n        castbar:HookScript(\"OnShow\", function(self) if E.db.hud.hideOOC and not InCombatLockdown() then H:Hide(frame,\"PLAYER_REGEN_DISABLED\") end end)\n        castbar:HookScript(\"OnHide\", function(self) if E.db.hud.hideOOC and not InCombatLockdown() then H:Hide(frame,\"PLAYER_REGEN_ENABLED\") end end)\n    end\n    \n    return castbar\nend\n\n-- Name element\nfunction H:ConstructName(frame)\n    self:AddElement(frame,'name')\n    local name = self:ConfigureFontString(frame,'name')\n    return name\nend\n\n-- Eclipse Bar for druids\nfunction H:ConstructEclipseBar(frame)\n    self:AddElement(frame,'classbars')\n\n    local eclipseBar = self:ConfigureFrame(frame,'classbars', true)\n    eclipseBar:SetFrameStrata(\"MEDIUM\")\n    eclipseBar:SetTemplate(\"Default\")\n    eclipseBar:SetFrameLevel(8)\n    eclipseBar:SetBackdropBorderColor(0,0,0,0)\n\n    local function ConfigureEclipseBar(name)\n        local element = 'classbars'\n        if name == nil then name = \"statusbar\" end\n        local sbname = frame.unit..'_hud_classbars_'..name\n\n        -- Create the status bar\n        local sb = CreateFrame('StatusBar', sbname, eclipseBar)\n\n        -- Dummy texture so we can set colors\n        sb:SetStatusBarTexture(E['media'].blankTex)\n        sb:GetStatusBarTexture():SetHorizTile(false)\n     \n        -- Frame strata/level\n        sb:SetFrameStrata(eclipseBar:GetFrameStrata())\n        sb:SetFrameLevel(eclipseBar:GetFrameLevel() + 5)\n\n        if not self.units[frame.unit][element].statusbars then\n            self.units[frame.unit][element].statusbars =  { }\n        end\n\n        self.units[frame.unit][element].statusbars[name] = sb\n        return sb\n    end\n                    \n    local lunarBar = ConfigureEclipseBar('lunarbar')\n    lunarBar:SetPoint('BOTTOM', eclipseBar)\n    lunarBar:SetOrientation('VERTICAL')\n    eclipseBar.LunarBar = lunarBar\n\n    local solarBar = ConfigureEclipseBar('solarbar')\n    solarBar:SetPoint('BOTTOM', lunarBar:GetStatusBarTexture(), 'TOP')\n    solarBar:SetStatusBarColor(.30, .52, .90)\n    solarBar:SetOrientation('VERTICAL')\n    eclipseBar.SolarBar = solarBar\n    \n    local eclipseBarText = self:ConfigureFontString(frame,'classbars',eclipseBar,'text')\n    eclipseBarText:SetPoint(\"LEFT\", eclipseBar, \"RIGHT\", E:Scale(10), 0)\n    \n    eclipseBar.PostUpdatePower = UF.EclipseDirection\n    eclipseBar.Text = eclipseBarText\n\n    return eclipseBar\nend\n\nfunction H:ConstructSubBars(frame,element,name,num)\n    self:AddElement(frame,element)\n\n    local bars = self:ConfigureFrame(frame,element,true)\n    bars:SetFrameLevel(frame:GetFrameLevel() + 30)\n    bars:SetTemplate(\"Default\")\n    bars:SetBackdropBorderColor(0,0,0,0)\n\n    for i = 1, num do\n        bars[i] = self:ConfigureStatusBar(frame,element,frame,name..i)\n        bars[i]:SetFrameStrata(\"MEDIUM\")\n        bars[i]:SetFrameLevel(frame:GetFrameLevel() + 35)\n\n        if i == 1 then\n            bars[i]:SetPoint(\"BOTTOM\", bars)\n        else\n            bars[i]:SetPoint(\"BOTTOM\", bars[i-1], \"TOP\", 0, E:Scale(1))\n        end\n     \n        bars[i]:SetOrientation('VERTICAL')\n    end\n\n    if element == 'classbars' then\n        bars.value = self:ConfigureFontString(frame,element,frame)                \n        bars.value:Hide()\n    end\n\n    return bars\nend\n\n-- Wild Mushroom Bar for Druids\nfunction H:ConstructWildMushroomBar(frame)\n    return self:ConstructSubBars(frame,'mushroom','wildmushroom',3)\nend\n\n-- Warlock spec bars\nfunction H:ConstructWarlockSpecBars(frame)\n    return self:ConstructSubBars(frame,'classbars','warlockspecbar',4)\nend\n\n-- Construct holy power for paladins\nfunction H:ConstructHolyPower(frame)\n    return self:ConstructSubBars(frame,'classbars','holypower',5)\nend\n\n-- Runes for death knights\nfunction H:ConstructRunes(frame)\n    return self:ConstructSubBars(frame,'classbars','rune',6)\nend\n\n-- Totems for shamans\nfunction H:ConstructTotems(frame)\n    return self:ConstructSubBars(frame,'classbars','totem',4)\nend\n\n-- Construct harmony bar for monks\nfunction H:ConstructHarmony(frame)\n   return self:ConstructSubBars(frame,'classbars','harmony',5)\nend\n \n-- Construct shadow orb bar for priests\nfunction H:ConstructShadowOrbBar(frame)\n    return self:ConstructSubBars(frame,'classbars','shadoworb',3)\nend\n\n-- Construct arcane bar for mages\nfunction H:ConstructArcaneBar(frame)\n    return self:ConstructSubBars(frame,'classbars','arcanecharge',6) \nend\n\n-- Combo points for rogues and druids\nfunction H:ConstructComboPoints(frame)\n    local bars = self:ConstructSubBars(frame,'cpoints','combopoint',5)\n    \n    bars[1]:SetStatusBarColor(0.69, 0.31, 0.31)     \n    bars[2]:SetStatusBarColor(0.69, 0.31, 0.31)\n    bars[3]:SetStatusBarColor(0.65, 0.63, 0.35)\n    bars[4]:SetStatusBarColor(0.65, 0.63, 0.35)\n    bars[5]:SetStatusBarColor(0.33, 0.59, 0.33)\n    \n    bars.Override = H.ComboDisplay\n    \n    frame:RegisterEvent(\"UNIT_DISPLAYPOWER\", H.ComboDisplay)\n    return bars\nend\n\nfunction H:ConstructAuraBars()\n    local config = E.db.hud.units.player['aurabars']\n    local media = config.media\n    local size = config.size\n    local bar = self.statusBar\n    \n    self:SetTemplate('Default')\n\n    bar:Size(size.width,size.height)\n    local textureSetting = 'units.player.aurabars.media.texture'\n    local fontSetting = 'units.player.aurabars.media.font'\n    if not H:IsDefault(textureSetting) then\n        bar:SetStatusBarTexture(LSM:Fetch(\"statusbar\", media.texture.statusbar))\n    else\n        bar:SetStatusBarTexture(LSM:Fetch(\"statusbar\", E.db.hud.statusbar))\n    end\n    \n    if not H:IsDefault(fontSetting) then\n        bar.spelltime:FontTemplate(LSM:Fetch(\"font\", media.font.font), media.font.fontsize, \"THINOUTLINE\")\n        bar.spellname:FontTemplate(LSM:Fetch(\"font\", media.font.font), media.font.fontsize, \"THINOUTLINE\")\n    else\n        bar.spelltime:FontTemplate(LSM:Fetch(\"font\", E.db.hud.font), E.db.hud.fontsize, \"THINOUTLINE\")\n        bar.spellname:FontTemplate(LSM:Fetch(\"font\", E.db.hud.font), E.db.hud.fontsize, \"THINOUTLINE\")\n    end\n    \n    bar.spellname:ClearAllPoints()\n    bar.spellname:SetPoint('LEFT', bar, 'LEFT', 2, 0)\n    \n    bar.iconHolder:SetTemplate('Default')\n    bar.icon:SetInside(bar.iconHolder)\n    bar.icon:SetDrawLayer('OVERLAY')\n    \n    \n    bar.iconHolder:HookScript('OnEnter', function(self)\n        GameTooltip.auraBarLine = true;\n    end)    \n    \n    bar.iconHolder:HookScript('OnLeave', function(self)\n        GameTooltip.auraBarLine = nil;\n        GameTooltip.numLines = nil\n    end)\n\n    bar.iconHolder:RegisterForClicks('RightButtonUp')\n    bar.iconHolder:SetScript('OnClick', function(self)\n        if not IsShiftKeyDown() then return; end\n        local auraName = self:GetParent().aura.name\n        \n        if auraName then\n            E:Print(string.format(L['The spell \"%s\" has been added to the Blacklist unitframe aura filter.'], auraName))\n            E.global['unitframe']['aurafilters']['Blacklist']['spells'][auraName] = {\n                ['enable'] = true,\n                ['priority'] = 0,           \n            }\n            UF:Update_AllFrames()\n        end\n    end)\nend\n\nfunction H:ConstructAuraBarHeader(frame)\n    self:AddElement(frame,'aurabars')\n    local auraBar = self:ConfigureFrame(frame,'aurabars')\n    auraBar.PostCreateBar = H.ConstructAuraBars\n    auraBar.PostUpdate = UF.ColorizeAuraBars\n    auraBar.gap = 1\n    auraBar.spacing = 1\n    auraBar.spark = true\n    auraBar.sort = true\n    auraBar.debuffColor = {0.8, 0.1, 0.1}\n    auraBar.filter = self.AuraBarFilter\n    \n    local healthColor = UF.db.colors.health\n\n    auraBar.friendlyAuraType = 'HELPFUL'\n    auraBar.enemyAuraType = 'HARMFUL'\n    auraBar.buffColor = {healthColor.r, healthColor.b, healthColor.g}\n    auraBar.down = true\n    \n    return auraBar\nend\n\nfunction H:ConstructRaidIcon(frame)\n    self:AddElement(frame,'raidicon')\n    local f = CreateFrame('Frame', nil, frame)\n    f:SetFrameLevel(20)\n    \n    local tex = f:CreateTexture(nil, \"OVERLAY\")\n    tex:SetTexture([[Interface\\TargetingFrame\\UI-RaidTargetingIcons]])\n    tex:Size(12)\n\n    return tex\nend\n\nfunction H:ConstructRestingIndicator(frame)\n    self:AddElement(frame,'resting')\n    local resting = frame:CreateTexture(nil, \"OVERLAY\")\n    resting:Size(16)\n    \n    return resting\nend\n\nfunction H:ConstructCombatIndicator(frame)\n    self:AddElement(frame,'combat')\n    local combat = frame:CreateTexture(nil, \"OVERLAY\")\n    combat:Size(13)\n    combat:SetVertexColor(0.69, 0.31, 0.31)\n    \n    return combat\nend\n\nfunction H:ConstructPvPIndicator(frame)\n    self:AddElement(frame,'pvp')\n    local pvp = self:ConfigureFontString(frame,'pvp')\n    pvp:SetTextColor(0.69, 0.31, 0.31)\n    \n    return pvp\nend\n\nfunction H:ConstructHealComm(frame)\n    self:AddElement(frame,'healcomm')\n    local mhpb = self:ConfigureStatusBar(frame,'healcomm',frame,'mybar')\n    mhpb:SetStatusBarColor(0, 1, 0.5, 0.25)\n    mhpb:SetFrameLevel(frame.Health:GetFrameLevel() - 2)\n    mhpb:Hide()\n    \n    local ohpb = self:ConfigureStatusBar(frame,'healcomm',frame,'otherbar')\n    ohpb:SetStatusBarColor(0, 1, 0, 0.25)\n    mhpb:SetFrameLevel(mhpb:GetFrameLevel())    \n    ohpb:Hide()\n    \n    if frame.Health then\n        ohpb:SetParent(frame.Health)\n        mhpb:SetParent(frame.Health)\n    end\n    \n    return {\n        myBar = mhpb,\n        otherBar = ohpb,\n        maxOverflow = 1,\n        PostUpdate = function(self)\n            if self.myBar:GetValue() == 0 then self.myBar:SetAlpha(0) else self.myBar:SetAlpha(1) end\n            if self.otherBar:GetValue() == 0 then self.otherBar:SetAlpha(0) else self.otherBar:SetAlpha(1) end\n        end\n    }\nend\n\nfunction H:ConstructGCD(frame)\n    self:AddElement(frame,'gcd')\n    local GCD = self:ConfigureStatusBar(frame,'gcd')\n    GCD:SetStatusBarColor(.8,.8,.8,0)\n    GCD:SetAlpha(1)\n    GCD:SetOrientation('VERTICAL')\n    GCD:SetFrameStrata(frame.Power:GetFrameStrata())\n    GCD:SetFrameLevel(frame.Power:GetFrameLevel()+2)\n    \n    GCD.Spark = GCD:CreateTexture(frame:GetName()..\"_GCDSpark\", \"OVERLAY\")\n    GCD.Spark:SetTexture(\"Interface\\\\CastingBar\\\\UI-CastingBar-Spark\")\n    GCD.Spark:SetVertexColor(1,1,1)\n    GCD.Spark:Height(12)\n    GCD.Spark:Point('CENTER',GCD:GetStatusBarTexture(),'TOP')\n    GCD.Spark:SetBlendMode(\"ADD\")\n\n    return GCD\nend\n\nfunction H:ConstructDebuffs(frame)\n    self:AddElement(frame,'debuffs')\n    local debuffs = self:ConfigureFrame(frame,'debuffs')\n\n    debuffs.size = 26\n    debuffs.num = 36\n\n    debuffs.spacing = 2\n    debuffs.initialAnchor = \"TOPRIGHT\"\n    debuffs[\"growth-y\"] = \"UP\"\n    debuffs[\"growth-x\"] = \"LEFT\"\n    debuffs.PostCreateIcon = self.PostCreateAura\n    debuffs.PostUpdateIcon = self.PostUpdateAura       \n    debuffs.CustomFilter = self.AuraFilter\n    debuffs.type = 'debuffs'\n\n    -- an option to show only our debuffs on target\n    --[[if unit == \"target\" then\n        debuffs.onlyShowPlayer = C.unitframes.onlyselfdebuffs\n    end]]\n    return debuffs\nend\n\nfunction H:ConstructBuffs(frame)\n    self:AddElement(frame,'buffs')\n    local buffs = self:ConfigureFrame(frame,'buffs')\n                        \n    buffs.size = 26\n    buffs.num = 36\n    buffs.numRow = 9\n                            \n    buffs.spacing = 2\n    buffs.initialAnchor = \"TOPLEFT\"\n    buffs.PostCreateIcon = H.PostCreateAura\n    buffs.PostUpdateIcon = H.PostUpdateAura\n    buffs.CustomFilter = self.AuraFilter\n    buffs.type = 'buffs'\n\n    return buffs\nend ",
			"file": "modules/hud/construct_elements.lua",
			"file_size": 17221,
			"file_write_time": 1361069261000000,
			"settings":
			{
				"buffer_size": 17277,
				"line_ending": "Unix"
			}
		},
		{
			"file": "config/profile.lua",
			"settings":
			{
				"buffer_size": 28212,
				"line_ending": "Unix"
			}
		},
		{
			"file": "modules/hud/update_elements.lua",
			"settings":
			{
				"buffer_size": 31370,
				"line_ending": "Unix"
			}
		},
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 949,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 327.0,
		"selected_items":
		[
			[
				"Package",
				"Package Control: Install Package"
			],
			[
				"Pack	",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/mtindal/Projects/ElvUI_Hud/config/profile.lua",
		"/Users/mtindal/Projects/IronSilver/IronSilver.bak/IronSilver.csproj",
		"/Users/mtindal/Projects/IronSilver/IronSilver/IronSilver.csproj",
		"/var/folders/xd/bm222s5j6675ttm6p32tq8lr000101/T/hg-editor-MUW86D.txt",
		"/Users/mtindal/Projects/ElvUI_Hud/modules/hud/update_elements.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/modules/hud/units/player.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/ElvUI_Hud.toc",
		"/Users/mtindal/Projects/ElvUI_Hud/modules/hud/construct_elements.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/locales/german.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/modules/hud/options.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/modules/hud/units/focus.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/modules/hud/units/targettarget.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/locales/english.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/libs/oUF_GCD/oUF_GCD.lua",
		"/Users/mtindal/Projects/ElvUI/.git/MERGE_MSG",
		"/Users/mtindal/Projects/ElvUI/.git/COMMIT_EDITMSG",
		"/Users/mtindal/Projects/ElvUI_Reminder/.git/TAG_EDITMSG",
		"/Users/mtindal/Projects/ElvUI_Hud/.git/TAG_EDITMSG",
		"/Users/mtindal/Projects/ElvUI_Hud/.git/COMMIT_EDITMSG",
		"/Users/mtindal/Projects/ElvUI_HyperDT/.git/TAG_EDITMSG",
		"/Users/mtindal/Projects/ElvUI_Hud/core/core.lua",
		"/Users/mtindal/Projects/ElvUI_AddOnSkins/.git/rebase-merge/git-rebase-todo",
		"/Users/mtindal/Projects/ElvUI_AddOnSkins/.git/MERGE_MSG",
		"/Volumes/.PEVolumes/PEVolume{dd94c553-fece-4323-9805-3941d1450765}/.Trashes/1025/Visual Studio 2010/Projects/IronSilver/IronSilver/Parser/SilverLexer.rl.cs",
		"/Volumes/.PEVolumes/PEVolume{dd94c553-fece-4323-9805-3941d1450765}/.Trashes/1025/Visual Studio 2010/Projects/IronSilver/IronSilver/SilverLexer.rl.cs",
		"/Volumes/.PEVolumes/PEVolume{dd94c553-fece-4323-9805-3941d1450765}/.Trashes/1025/Visual Studio 2010/Projects/IronSilver/IronSilver/obj/Debug/SilverLexer.cs",
		"/Users/mtindal/Development/mono/mcs/jay/Makefile",
		"/Users/mtindal/Projects/EternityChronicles/Silver/Classes/Parser/silver.y",
		"/Users/mtindal/Projects/EternityChronicles/Silver/Classes/Parser/y.output",
		"/Users/mtindal/Projects/EternityChronicles/Silver/Classes/Parser/silver.jay",
		"/Users/mtindal/Documents/lempar.cs",
		"/Users/mtindal/Development/ElvUI_SLE/.git/rebase-merge/git-rebase-todo",
		"/Users/mtindal/Development/ElvUI_SLE/.git/COMMIT_EDITMSG",
		"/Users/mtindal/Projects/ElvUI_Hud/ElvUI_Hud.sublime-workspace",
		"/Users/mtindal/Projects/ElvUI_Hud/libs/oUF_HarmonyBar/oUF_HarmonyBar.lua",
		"/Users/mtindal/Development/ElvUI/.git/MERGE_MSG",
		"/Users/mtindal/Projects/Exp2/.git/TAG_EDITMSG",
		"/Users/mtindal/Projects/ElvUI_Hud/.git/rebase-merge/git-rebase-todo",
		"/Users/mtindal/Downloads/1pp/1pp.tp2",
		"/Users/mtindal/.gemrb/bg2.cfg",
		"/Users/mtindal/.gemrc/bg2.cfg",
		"/Users/mtindal/.GemRB/bg2.cfg",
		"/Users/mtindal/.GemRB/GemRB.cfg",
		"/Users/mtindal/.GemRB/bg2.cnf",
		"/Users/mtindal/Projects/ElvUI_Hud/core/options.lua",
		"/Users/mtindal/Development/gemrb/gemrb/core/Interface.cpp",
		"/Users/mtindal/Development/weidu/src/trealparserin.gr",
		"/Users/mtindal/Downloads/elkound-2009.01.26/smbase/mysig.cc",
		"/Users/mtindal/Downloads/elkound-2009.01.26/elkhound/c/c_type.cc",
		"/Users/mtindal/Downloads/tis2bg2/tis2bg2.cpp",
		"/Users/mtindal/Downloads/elkound-2009.01.26/elkhound/c/c_type.h",
		"/Users/mtindal/Downloads/elkound-2009.01.26/mysig.cc",
		"/Users/mtindal/Development/weidu/src/trealparserin.in",
		"/usr/local/Library/Formula/mercurial.rb",
		"/Users/mtindal/.hgrc",
		"/Users/mtindal/Projects/ElvUI_Hud/locales/load_locales.xml",
		"/Users/mtindal/Development/ElvUI/.git/COMMIT_EDITMSG",
		"/Users/mtindal/Projects/KittyMUD/.git/COMMIT_EDITMSG",
		"/Users/mtindal/Projects/PartyXP/profile.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/modules/hud/units/pet.lua",
		"/Users/mtindal/Development/ElvUI/.git/rebase-merge/git-rebase-todo",
		"/Users/mtindal/Projects/ElvUI_Hud/modules/hud/hud.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/modules/hud/units/target.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/modules/hud/units/pettarget.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/locales/italian.lua",
		"/Applications/World of Warcraft Beta/Interface/AddOns/ElvUI_ShadowOrbColor/ElvUI_ShadowOrbColor.lua",
		"/Users/mtindal/Development/ElvUI_SLE/.git/MERGE_MSG",
		"/Users/mtindal/Projects/ElvUI_Hud/locales/spanish.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/locales/china.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/locales/french.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/locales/korean.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/locales/portuguese.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/locales/russian.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/locales/taiwan.lua",
		"/Applications/World of Warcraft/Interface/AddOns/ElvUI_AdvancedMovers/ElvUI_AdvancedMovers.lua",
		"/Users/mtindal/Projects/ElvUI_PartyXP/ElvUI_PartyXP.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/libs/oUF_WildMushroom/oUF_WildMushroom.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/libs/oUF_WeakenedSoul/oUF_WeakenedSoul.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/libs/oUF_WarlockSpecBars/oUF_WarlockSpecBars.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/libs/oUF_ShadowOrbsBar/oUF_ShadowOrbsBar.lua",
		"/Users/mtindal/Development/ElvUI-Beta/.git/MERGE_MSG",
		"/Users/mtindal/Development/ElvUI-Beta/.git/COMMIT_EDITMSG",
		"/usr/local/.git/MERGE_MSG",
		"/Applications/World of Warcraft/Interface/AddOns/Archy/Archy.toc",
		"/Users/mtindal/Projects/ElvUI_Hud/releases/create-release.sh",
		"/Users/mtindal/Downloads/ElvUI_EnhancedNameplates/ElvUI_EnhancedNameplates.toc",
		"/Users/mtindal/Downloads/stufiles/finalexam.htm",
		"/Applications/World of Warcraft Beta/Interface/AddOns/ElvUI_LocPlus/core.lua",
		"/Users/mtindal/Development/Tukui-Beta/Tukui/core/functions.lua",
		"/Users/mtindal/.zshrc",
		"/Users/mtindal/Projects/ElvUI_Hud/libs/load_libs.xml",
		"/Users/mtindal/Development/ElvUI-Beta/ElvUI/locales/english.lua",
		"/Users/mtindal/Development/ElvUI-Beta/ElvUI/libs/oUF_Plugins/oUF_TotemBar/oUF_TotemBar.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/libs/oUF_HarmonyBar/oUF_HarmonyBar.toc",
		"/Applications/World of Warcraft Beta/Interface/AddOns/ElvUI/modules/unitframes/tags.lua",
		"/Applications/World of Warcraft Beta/Interface/AddOns/ElvUI/init.lua",
		"/Applications/World of Warcraft Beta/Interface/AddOns/ElvUI/libs/oUF_Plugins/oUF_AuraBars/oUF_AuraBars.lua",
		"/Users/mtindal/Downloads/Tukui-Beta-tree-110541e/Tukui/modules/unitframes/layouts/tukui.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/core/load_core.xml",
		"/Users/mtindal/Projects/ElvUI_Hud/libs/oUF_WildMushroom/oUF_WildMushroom.toc",
		"/Applications/World of Warcraft Beta/Interface/AddOns/ElvUI/modules/unitframes/options.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/modules/hud/load_hud.xml",
		"/Applications/World of Warcraft Beta/Interface/AddOns/ElvUI/config/profile.lua",
		"/Applications/World of Warcraft Beta/Interface/AddOns/ElvUI/modules/actionbars/options.lua",
		"/Applications/World of Warcraft Beta/Interface/AddOns/ElvUI/libs/oUF/elements/tags.lua",
		"/Applications/World of Warcraft Beta/Interface/AddOns/ElvUI_SLE/core/options.lua",
		"/Applications/World of Warcraft Beta/Interface/AddOns/ElvUI/libs/oUF_Plugins/oUF_TotemBar/oUF_TotemBar.lua",
		"/Applications/World of Warcraft Beta/Interface/AddOns/ElvUI/libs/oUF_Plugins/oUF_ArcaneCharge/oUF_ArcaneCharge.lua",
		"/Applications/World of Warcraft Beta/Interface/AddOns/ElvUI/libs/oUF/elements/threat.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/libs/oUF_ArcaneCharge/oUF_ArcaneCharge.lua",
		"/Applications/World of Warcraft Beta/Interface/AddOns/ElvUI/modules/unitframes/update_elements.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/libs/oUF_ThreatBar/oUF_ThreatBar.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/modules/hud/layouts/normal/player.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/ElvUI_Hud.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/modules/hud/layouts/normal/target.lua",
		"/Users/mtindal/Projects/ElvUI_Hud/modules/hud/layouts/normal/pet.lua",
		"/Applications/World of Warcraft/Interface/AddOns/ElvUI/modules/classtimers/classtimers.lua",
		"/Applications/World of Warcraft/Interface/AddOns/Tukui_UIPackages_Skins/Archy.lua",
		"/Users/mtindal/Downloads/0495806404_307588/tutorial.05/case3/dtable.css",
		"/Users/mtindal/Downloads/0495806404_307588/tutorial.05/case3/dome.css",
		"/Users/mtindal/Downloads/0495806404_307588/tutorial.05/case3/dhome.htm",
		"/Users/mtindal/Downloads/0495806404_307588/tutorial.05/case3/dhometxt.htm",
		"/Users/mtindal/Downloads/0495806404_307588/tutorial.05/case3/dometxt.css",
		"/Users/mtindal/Downloads/0495806404_307588/tutorial.05/case3/dtabletxt.css",
		"/Applications/World of Warcraft/Interface/AddOns/ElvUI_Hud/ElvUI_Hud.lua",
		"/Applications/World of Warcraft/Interface/AddOns/ElvUI_Hud/config/profile.lua",
		"/Applications/World of Warcraft/Interface/AddOns/ElvUI_Hud/modules/hud/layouts/normal/player.lua",
		"/Applications/World of Warcraft/Interface/AddOns/ElvUI_Hud/modules/hud/layouts/normal/target.lua"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"LunarBar",
			"Eclipse",
			"SetAlpha",
			"ForceUpdate",
			"HarmonyBar",
			"conflict",
			"#empty",
			"HarmonyBar",
			"LIGHT_FORCE",
			"aura",
			"SPELL_POWER_LIGHT_FORCE",
			"print",
			"CheckHealthValue",
			"eclipse",
			"+ 11",
			"HealthFrame",
			"SetTemplate\\('Transparent'\\)",
			"SetTemplate\\(\"Transparent\"\\)",
			"SetTemplate",
			"CreateBackdrop",
			"SetTemplate",
			"[0-9]+(L.+= )(.+)",
			"[0-9](L.+= )(.+)",
			"Flash",
			"Alpha",
			"SetAlpha",
			"self:ConstructCombatFade(frame)",
			"self:ConstructCombatFrame(frame)",
			"hideOOC",
			"SetAlpha",
			"hideOOC",
			"Strata",
			"Default",
			"ForceUpdate",
			"print",
			"__CheckEnabled",
			"Point",
			"health",
			"self",
			"verticalal",
			"CheckInterrupt",
			"E.db.hud",
			"ElvUF",
			"ElvUF:",
			"gcd",
			"enabled",
			"OnHide",
			"EnableMouse",
			"select",
			"attachTo",
			"select",
			"Harmony",
			"PostUpdate",
			"Monk",
			"Harmony",
			"Simple",
			"local self",
			"E.db.hud",
			"Hide",
			"= ([A-Z].+)",
			"print",
			"color",
			"interrupt",
			".elements",
			"(L\\[.+\\]) = .+\"",
			"FormatTime",
			"backdrop",
			"print",
			"UpdateFrame(unit)",
			"Resting Indicator",
			"L\\[\"(.+)\"\\] = true",
			"L\\[\"(.+)\"\\]",
			"Set the Width of the Text Font",
			"Set the Width of Text Font",
			"Arcane",
			"spaced",
			"spaced and spacing or 1",
			"UpdateFrames",
			"/ [0-9]",
			"for i.*=.*1,[0-9]",
			"Override",
			"PostUpdate",
			"/ [0-9]",
			"for i = 1,numPoints",
			"for i.*=.*1,[0-9]",
			"frame\\.([^[]+).+:Point\\([^,]+,[ ]*[a-z]+",
			"print",
			"msurhoom",
			"classbar'",
			"ovveride",
			"UpdateMAll",
			"override",
			"\\['ovveride'\\] = (true|false),",
			"\\['override'\\] = (true|false),",
			"libs\\\\(.+)",
			"Spark",
			"local ([a-z]+)",
			"\\['([^']+)'\\] =",
			"\\['[^']+'\\] =",
			"UpdateClassBar",
			"arg.",
			"arg",
			"print",
			"statusbar = {",
			"font = {",
			"font",
			"name",
			"UpdateMedia",
			"value =",
			"H:UpdateHud\\([^)]+\\)",
			"P.hud",
			"E.db.unitframe",
			"player",
			"P.hud",
			"pvp",
			"resting",
			"pvp",
			"'name'",
			"cpoints",
			"classbars",
			"power",
			"vak",
			"health",
			"P.hud",
			"P.hud[",
			"P.hud.units",
			"SetStatusBarColor",
			"SetTemplate(\"Default\")"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"// empty",
			"Harmony",
			"SPELL_POWER_CHI",
			"+ 35",
			"sbframe",
			"SetTemplate(\"Default\")",
			"\\1\"\\2\"",
			"frame.CombatFade = self:ConstructCombatFade(frame)",
			"frame.CombatFade = self:ConstructCombatFrame(frame)",
			"oUF",
			"oUF:",
			"self.db",
			"= \"\\1\"",
			"",
			"\\1 = true",
			"UpdateAllFrames()",
			"Rest Icon",
			"L[\"\\1\"] = \"\\1\"",
			"spacing",
			"UpdateFrame",
			"/ numPoints",
			"for i = 1, numPoints",
			"/ numPoints",
			"for i = 1, numPoints",
			"for i = 1,numPoints",
			"frame.\\1[i]:Point(\"BOTTOM\",frame.\\1",
			"mushroom",
			"classbars'",
			"overide",
			"UpdateAll",
			"",
			"<Script file=\"\\1\"/>",
			"['\\1']",
			"local \\1 =",
			"args.",
			"UpdateAllFrames",
			"H:UpdateAllFrames()",
			"E.db.hud",
			"pettarget",
			"targettarget",
			"pet",
			"target",
			"healcomm",
			"combat",
			"resting",
			"raidicon",
			"'pvp'",
			"aurabars",
			"cpoints",
			"classbars",
			"castbar",
			"power",
			"P.hud.units[",
			"P.hud",
			"SetTemplate(\"Transparent\")",
			"(false)",
			"(true)",
			"units",
			"current-percent",
			"current",
			"current-percent",
			"AddElement",
			"H:Construct",
			"e.",
			"self.units[",
			"'\\1'",
			"return frame.\\1",
			"ElvUF_PetHud",
			"ElvUF_TargetHud",
			"ElvUF_PlayerHud",
			"H:DisableFrame",
			"H:EnableFrame",
			"H:Hide",
			"OnLeave",
			"frame",
			"HUD:",
			"HUD.",
			"local HUD ="
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "modules/hud/hud.lua",
					"settings":
					{
						"buffer_size": 12215,
						"regions":
						{
						},
						"selection":
						[
							[
								3877,
								3877
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "modules/hud/units/load_units.xml",
					"settings":
					{
						"buffer_size": 216,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "modules/hud/units/target.lua",
					"settings":
					{
						"buffer_size": 1012,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "libs/load_libs.xml",
					"settings":
					{
						"buffer_size": 321,
						"regions":
						{
						},
						"selection":
						[
							[
								44,
								44
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "core/core.lua",
					"settings":
					{
						"buffer_size": 7214,
						"regions":
						{
						},
						"selection":
						[
							[
								5067,
								5067
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2665.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"settings":
					{
						"buffer_size": 24077,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										164,
										172
									],
									[
										298,
										306
									],
									[
										498,
										506
									],
									[
										652,
										660
									],
									[
										866,
										874
									],
									[
										987,
										995
									],
									[
										1085,
										1093
									],
									[
										1237,
										1245
									],
									[
										1411,
										1419
									],
									[
										1491,
										1499
									],
									[
										1570,
										1578
									],
									[
										1624,
										1632
									],
									[
										1833,
										1841
									],
									[
										1869,
										1877
									],
									[
										1887,
										1895
									],
									[
										1917,
										1925
									],
									[
										1928,
										1936
									],
									[
										2017,
										2025
									],
									[
										2099,
										2107
									],
									[
										2378,
										2386
									],
									[
										2420,
										2428
									],
									[
										2630,
										2638
									],
									[
										2677,
										2685
									],
									[
										2804,
										2812
									],
									[
										2989,
										2997
									],
									[
										3233,
										3241
									],
									[
										3443,
										3451
									],
									[
										3684,
										3692
									],
									[
										3992,
										4000
									],
									[
										4020,
										4028
									],
									[
										4107,
										4115
									],
									[
										4138,
										4146
									],
									[
										4312,
										4320
									],
									[
										4604,
										4612
									],
									[
										4779,
										4787
									],
									[
										4951,
										4959
									],
									[
										5099,
										5107
									],
									[
										5294,
										5302
									],
									[
										5478,
										5486
									],
									[
										5679,
										5687
									],
									[
										5734,
										5742
									],
									[
										5838,
										5846
									],
									[
										5888,
										5896
									],
									[
										6015,
										6023
									],
									[
										6060,
										6068
									],
									[
										6245,
										6253
									],
									[
										6272,
										6280
									],
									[
										6296,
										6304
									],
									[
										6318,
										6326
									],
									[
										6355,
										6363
									],
									[
										6560,
										6568
									],
									[
										6764,
										6772
									],
									[
										6883,
										6891
									],
									[
										7062,
										7070
									],
									[
										7225,
										7233
									],
									[
										7272,
										7280
									],
									[
										7397,
										7405
									],
									[
										7451,
										7459
									],
									[
										7594,
										7602
									],
									[
										7649,
										7657
									],
									[
										7832,
										7840
									],
									[
										8114,
										8122
									],
									[
										8426,
										8434
									],
									[
										8638,
										8646
									],
									[
										8937,
										8945
									],
									[
										9260,
										9268
									],
									[
										9394,
										9402
									],
									[
										9594,
										9602
									],
									[
										9748,
										9756
									],
									[
										9962,
										9970
									],
									[
										10083,
										10091
									],
									[
										10181,
										10189
									],
									[
										10333,
										10341
									],
									[
										10507,
										10515
									],
									[
										10587,
										10595
									],
									[
										10666,
										10674
									],
									[
										10720,
										10728
									],
									[
										10929,
										10937
									],
									[
										10965,
										10973
									],
									[
										10983,
										10991
									],
									[
										11013,
										11021
									],
									[
										11024,
										11032
									],
									[
										11113,
										11121
									],
									[
										11195,
										11203
									],
									[
										11474,
										11482
									],
									[
										11516,
										11524
									],
									[
										11726,
										11734
									],
									[
										11773,
										11781
									],
									[
										11900,
										11908
									],
									[
										12085,
										12093
									],
									[
										12329,
										12337
									],
									[
										12539,
										12547
									],
									[
										12780,
										12788
									],
									[
										13088,
										13096
									],
									[
										13116,
										13124
									],
									[
										13203,
										13211
									],
									[
										13234,
										13242
									],
									[
										13408,
										13416
									],
									[
										13700,
										13708
									],
									[
										13875,
										13883
									],
									[
										14047,
										14055
									],
									[
										14195,
										14203
									],
									[
										14390,
										14398
									],
									[
										14574,
										14582
									],
									[
										14775,
										14783
									],
									[
										14830,
										14838
									],
									[
										14934,
										14942
									],
									[
										14984,
										14992
									],
									[
										15111,
										15119
									],
									[
										15156,
										15164
									],
									[
										15341,
										15349
									],
									[
										15368,
										15376
									],
									[
										15392,
										15400
									],
									[
										15414,
										15422
									],
									[
										15451,
										15459
									],
									[
										15656,
										15664
									],
									[
										15860,
										15868
									],
									[
										15979,
										15987
									],
									[
										16158,
										16166
									],
									[
										16321,
										16329
									],
									[
										16368,
										16376
									],
									[
										16493,
										16501
									],
									[
										16547,
										16555
									],
									[
										16690,
										16698
									],
									[
										16745,
										16753
									],
									[
										16928,
										16936
									],
									[
										17210,
										17218
									],
									[
										17522,
										17530
									],
									[
										17734,
										17742
									],
									[
										18033,
										18041
									],
									[
										18391,
										18398
									],
									[
										18644,
										18651
									],
									[
										18946,
										18953
									],
									[
										18959,
										18966
									],
									[
										19295,
										19302
									],
									[
										19308,
										19315
									],
									[
										19595,
										19602
									],
									[
										19870,
										19877
									],
									[
										20145,
										20152
									],
									[
										20437,
										20444
									],
									[
										20795,
										20802
									],
									[
										21097,
										21104
									],
									[
										21299,
										21306
									],
									[
										21349,
										21356
									],
									[
										21561,
										21568
									],
									[
										21776,
										21783
									],
									[
										21998,
										22005
									],
									[
										22329,
										22336
									],
									[
										22360,
										22367
									],
									[
										22398,
										22405
									],
									[
										22429,
										22436
									],
									[
										22467,
										22474
									],
									[
										22621,
										22628
									],
									[
										22664,
										22671
									],
									[
										22706,
										22713
									],
									[
										22749,
										22756
									],
									[
										22921,
										22928
									],
									[
										22948,
										22955
									],
									[
										23319,
										23327
									],
									[
										23603,
										23611
									],
									[
										23719,
										23727
									],
									[
										23899,
										23907
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								23902,
								23902
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 4,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 10125.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "core/options.lua",
					"settings":
					{
						"buffer_size": 7956,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1195.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "modules/hud/construct_elements.lua",
					"settings":
					{
						"buffer_size": 17277,
						"regions":
						{
						},
						"selection":
						[
							[
								3587,
								3587
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 269.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "config/profile.lua",
					"settings":
					{
						"buffer_size": 28212,
						"regions":
						{
						},
						"selection":
						[
							[
								25091,
								28189
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12638.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "modules/hud/update_elements.lua",
					"settings":
					{
						"buffer_size": 31370,
						"regions":
						{
						},
						"selection":
						[
							[
								2590,
								2590
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 954.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "README.md",
					"settings":
					{
						"buffer_size": 949,
						"regions":
						{
						},
						"selection":
						[
							[
								948,
								948
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}
